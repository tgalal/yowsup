#!/usr/bin/python

'''
Copyright (c) <2012> Tarek Galal <tare2.galal@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy of this 
software and associated documentation files (the "Software"), to deal in the Software 
without restriction, including without limitation the rights to use, copy, modify, 
merge, publish, distribute, sublicense, and/or sell copies of the Software, and to 
permit persons to whom the Software is furnished to do so, subject to the following 
conditions:

The above copyright notice and this permission notice shall be included in all 
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR 
A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
'''

__author__ = "Tarek Galal"
__version__ = "0.3.1"
__email__ = "tare2.galal@gmail.com"
__license__ = "MIT"

import argparse, sys, os
from Yowsup.Common.utilities import Utilities
from Yowsup.Common.debugger import Debugger
from Yowsup.Common.constants import Constants
from Examples.CmdClient import WhatsappCmdClient
from Examples.EchoClient import WhatsappEchoClient
from Examples.ListenerClient import WhatsappListenerClient
from Yowsup.Registration.v1.coderequest import WACodeRequest
from Yowsup.Registration.v1.regrequest import WARegRequest
from Yowsup.Registration.v1.existsrequest import WAExistsRequest
from Yowsup.Registration.v2.existsrequest import WAExistsRequest as WAExistsRequestV2
from Yowsup.Registration.v2.coderequest import WACodeRequest as WACodeRequestV2
from Yowsup.Registration.v2.regrequest import WARegRequest as WARegRequestV2

import threading,time, base64, fileinput

DEFAULT_CONFIG = os.path.expanduser("~")+"/.yowsup/auth"

CONFIG_HELP = """\
Yowsup Configuration
====================
Your configuration should contain info about your login credentials to Whatsapp. This typically consist of 3 fields:\n
	phone:		Your full phone number including country code, without '+' or '00'
	
	id:		This field is used in registration calls (-r|-R|-e), and for login if you are trying to use an existing account that is setup \
on a physical device. Whatsapp has recently deprecated using IMEI/MAC to generate the account's password in updated versions\
of their clients. Use --v1 switch to try it anyway. Typically this field should contain the phone's IMEI if your account is setup on \
a Nokia or an Android device, or the phone's WLAN's MAC Address for iOS devices. If you are not trying to use existing credentials\
or want to register, you can leave this field blank or set it to some random text.\
Do not change this field after registering using Yowsup

	password:	Password to use for login. You obtain this password when you register using Yowsup. The field will be ignored if you are using  --v1

You can specify those variables using -c argument, as a path to a file containing this configuration.

Config file Example:

##/home/user/my_whatsapp_config.txt#
phone=201111111111
id=FF:FF:FF:FF:FF:FF
password=S1nBGCvZhb6TBQrbm2sQCfSLkXM=
#########

Usage Example for listening to incoming messages:

	yowsup-cli -c /home/user/my_whatsapp_config.txt -l

You can also use config.example as a template
"""

def startDbusInterface():
	from dbus.mainloop.glib import DBusGMainLoop
	from Yowsup.Interfaces.DBus.DBusInterface import DBusInitInterface
	import gobject
	
	DBusGMainLoop(set_as_default=True)
	
	DBusInitInterface()
	
	mainloop = gobject.MainLoop()
	
	gobject.threads_init()
	print "starting"
	mainloop.run()


def resultToString(result):
	out = []
	for k, v in result.items():
		if v is None:
			continue
		out.append("%s: %s" %(k, v))
		
	return "\n".join(out)

def getCredentials(config = DEFAULT_CONFIG):
	if os.path.isfile(config):
		f = open(config)
		
		phone = ""
		idx = ""
		pw = ""
		
		try:
			for l in f:
				line = l.strip()
				if len(line) and line[0] not in ('#',';'):
					
					prep = line.split('#', 1)[0].split(';', 1)[0].split('=', 1)
					
					varname = prep[0].strip()
					val = prep[1].strip()
					
					if varname == "phone":
						phone = val
					elif varname == "id":
						idx = val
					elif varname =="password":
						pw =val

			return [phone, idx, pw];
		except:
			pass

	return 0

def updatePassword(newpw, config = DEFAULT_CONFIG):
	if os.path.isfile(config):
		for line in fileinput.input(config, inplace=1):
			if "password=" in line:
				print "password=%s" % (newpw),
			else:
				print "%s" % (line),
	return 0

parser = argparse.ArgumentParser(description='yowsup-cli Command line options')

clientsGroup = parser.add_argument_group("Client options")

regGroup = parser.add_argument_group("Registration options")


modes = clientsGroup.add_mutually_exclusive_group()
modes.add_argument('-l','--listen', help='Listen to messages', action="store_true", required=False, default=False)
modes.add_argument('-s','--send', help="Send message to phone number and close connection. Phone is full number including country code, without '+' or '00'", action="store",  nargs=2, metavar=('<phone>','<message>'), required=False)
modes.add_argument('-i','--interactive', help="Start an interactive conversation with a contact. Phone is full number including country code, without '+' or '00'", action="store", metavar='<phone>', required=False)
#modes.add_argument('-b','--bot', help='Bot', action="store_true", required=False, default=False)


clientsGroup.add_argument('-w','--wait', help='If used with -s, then connection will not close until server confirms reception of the message', action="store_true", required=False, default=False)
clientsGroup.add_argument('-a','--autoack', help='If used with -l or -i, then a message received ack would be automatically sent for received messages', action="store_true", required=False, default=False)
clientsGroup.add_argument('-k','--keepalive', help="When used with -l or -i, Yowsup will automatically respond to server's ping requests to keep connection alive", action="store_true", required=False, default=False)


regSteps = regGroup.add_mutually_exclusive_group()
regSteps.add_argument("-r", '--requestcode', help='Request the 3 digit registration code from Whatsapp.', action="store", required=False, metavar="(sms|voice)")
regSteps.add_argument("-R", '--register', help='Register account on Whatsapp using the provided 3 digit code', action="store", required=False, metavar="code")
regSteps.add_argument("-e", '--exists', help='Check if account credentials are valid', action="store_true", required=False)


debugTools = parser.add_argument_group("Debug tools").add_mutually_exclusive_group();

debugTools.add_argument('--generatepassword', help="Generate password from given string in same way Whatsapp generates it from a given IMEI or MAC Address", action="store", metavar="input")
debugTools.add_argument('--decodestring', help="Decode byte arrays found in decompiled version of Whatsapp. Tested with S40 version. Input should be comma separated without the enclosing brackets. Example: ./yowsup-cli --decodestring 112,61,100,123,114,103,96,114,99,99,61,125,118,103", action="store", metavar="encoded_array")


parser.add_argument("--help-config", help="Display info about configuration format", action="store_true")
parser.add_argument("--v1", help="If specified, it will force usage of old API in registration calls. Also password field in config will be ignored and will attempt to generate password from specified identity (IMEI/MAC)", action="store_true")
parser.add_argument('-c','--config', help="Path to config file containing authentication info. For more info about config format use --help-config", action="store", metavar="file", required=False, default=False)
parser.add_argument('-D','--dbus', help='Start DBUS interface', action="store_true", required=False, default=False)
parser.add_argument('-d','--debug', help='Enable debug messages', action="store_true", required=False, default=False)
parser.add_argument('-v', '--version', help="Print version info and exit", action='store_true', required=False, default=False)


args = vars(parser.parse_args())
if len(sys.argv) == 1:
	parser.print_help()

elif args["help_config"]:
	print CONFIG_HELP
elif args["version"]:
	print "yowsup-cli %s, using Yowsup %s"%(__version__, Constants.v)
else:
	credentials = getCredentials(args["config"] or DEFAULT_CONFIG)
	
	if credentials:

		sender, identity, password = credentials
		identity = Utilities.processIdentity(identity)
		password = identity or password if args["v1"] else base64.b64decode(password)

		countryCode = sender[0:2]
		phonenumber= sender[2:]
		Debugger.enabled = args['debug']

		if args["interactive"]:
			val = args["interactive"]
			wa = WhatsappCmdClient(val, args['keepalive'] ,args['autoack'])
			wa.login(sender, password)
		elif args['send']:
			phone = args["send"][0]
			message = args["send"][1]
			wa = WhatsappEchoClient(phone, message, args['wait'])
			wa.login(sender, password)
		elif args['listen']:
			wa = WhatsappListenerClient(args['keepalive'], args['autoack'])

			wa.login(sender, password)

		elif args["requestcode"]:

			method = args["requestcode"]
			if method not in ("sms","voice"):
				print "coderequest accepts only sms or voice as a value"
			else:
				if(args["v1"]):
					wc = WACodeRequest(countryCode, phonenumber, method)
				else:
					wc = WACodeRequestV2(countryCode, phonenumber, identity, method)
					
				result = wc.send()
				print resultToString(result)
				
		elif args["register"]:
			code = args["register"]

			if(args["v1"]):
				wr = WARegRequest(countryCode, phonenumber, code, identity)
			else:
				code = "".join(code.split('-'))
				wr = WARegRequestV2(countryCode, phonenumber, code, identity)
			
			
			result = wr.send()
			print resultToString(result)
			
		elif args["exists"]:

			if(args["v1"]):
				we = WAExistsRequest(countryCode, phonenumber, identity)
				result = we.send()
				print resultToString(result)
			else:
				we = WAExistsRequestV2(countryCode, phonenumber, identity)
				result = we.send()
				print resultToString(result)

				if result["pw"] is not None:
					print "Config file updated with new password\n"
					updatePassword(result["pw"], args["config"] or DEFAULT_CONFIG)

	elif args["dbus"]:
            startDbusInterface()
	elif args["generatepassword"]:
		print Utilities.processIdentity(args["generatepassword"]);
	elif args["decodestring"]:
		print Utilities.decodeString(map(int, "".join(args["decodestring"].split(' ')).split(',')))
	else:
		print "Error: config file is invalid"
